#File: RandomWalkBasic.ipynb
#Description:  A sample of N particles starts at the center of a cuboid of volume L^3 and is allowed to undergo a random walk. The percentage 
#is calculated at the end along with time required for the computation.
import random
import numpy as np
from numpy.random import normal
import scipy as sp
import math
import matplotlib.pyplot as plt
import time
start = time.time()
N = 1000
counts = 0
counter = 0
percent = 0
nt = 6400
r = 508
d = float(5)
L = 1000
A = [np.zeros(3)]*N
B = [np.zeros(2)]*N
C = np.zeros(3)

#Funtion: dxi()
#Description: gives the probability distribution drawn from to take a step.
#Parameters:n/a.
#Returns: float normally distributed with sd = d.
def dxi():
  return normal(0,d)
#Funtions: theta(),rho()
#Description: gives the spherical transformation.
#Parameters: x,y - position of particle in cartesian.
#Returns: float between 0 and pi for theta and 0 and L for rho.
def theta(x,y):
  if (x<0 and y>0) or (x<0 and y<0):
    return math.pi + np.arctan(y/x)
  else:
    return np.arctan(y/x)
def rho(x,y):
  return np.sqrt(np.square(x) + np.square(y))
  
#Funtion: l(a)
#Description: calculates the particle distance from the center.
#Parameters: a - particle array containing coordinates.
#Returns: distance as a float between 0 and L.
def l(a):
  return ((a[0])**2+(a[1])**2+(a[2])**2)**.5
  
#Function: influx(a)
#Description: accounts for particles coming from the boundary to maintain N effectively.
#Parameters: a - particle array containing coordinates.
#Returns: numpy array cotaining the new particle position.
def influx(a):
  return np.array([normal(0,L),normal(0,L),normal(0,L)])
  

#Function: cylindricTransF(a)
#Description: converts the coordinates from cartesian to cylindrical.
#Parameters: a - particle array containing coordinates.
#Returns: numpy array cotaining the transformed particle coordinates.
def cylindricTransF(a):
  return np.array([rho(a[0],a[1]),theta(a[0],a[1]),a[2]])
  

#Function: step(a)
#Description: computes a step taken by the particle.
#Parameters: a - particle array containing coordinates.
#Returns: numpy array cotaining the new particle position.
def step(a):
  C = [dxi(),dxi(),dxi()]
  return np.add(C,a)
  
for i in range(nt):
  #counter keeps track of the position in the list. 
  for item in A:
    A[counter] = step(item)
    while L<=l(A[counter]):
      A[counter] = influx(A[counter])
    B[counter] = cylindricTransF(A[counter])
    if r <l(A[counter]):
      counts += 1
    counter += 1
  percent = float(counts/N)  
  counter = 0
  counts = 0
  if i > int(3*nt/4):  
      if percent < .5:
        r -= 1
      else:
        r += 1
print(r)
print(percent)
print('It took',time.time()-start, 'seconds')






import random
import numpy as np
from numpy.random import normal
import scipy as sp
import math
import matplotlib.pyplot as plt
import time
start = time.time()
N = 1000
counts = 0
counter = 0
percent = 0
nt = 6400
r = 492
d = float(5)
L = 1000
A = [np.zeros(3)]*N
B = [np.zeros(2)]*N
C = np.zeros(3)
def dx():
  return normal(0,d)
def dy():
  return normal(0,d)
def dz():
  return normal(0,d)
def theta(x,y):
  if (x<0 and y>0) or (x<0 and y<0):
    return math.pi + np.arctan(y/x)
  else:
    return np.arctan(y/x)
def rho(x,y):
  return np.sqrt(np.square(x) + np.square(y))
def l(a):
  return ((a[0])**2+(a[1])**2+(a[2])**2)**.5
def influx(a):
  return np.array([a[0]-normal(0,d),a[1]-normal(0,d),a[2]-normal(0,d)])
def cylindricTransF(a):
  return np.array([rho(a[0],a[1]),theta(a[0],a[1]),a[2]])
def step(a):
  C = [dx(),dy(),dz()]
  return np.add(C,a)
for i in range(nt):
  for item in A:
    A[counter] = step(item)
    while L<=l(A[counter]):
      A[counter] = influx(A[counter])
    B[counter] = cylindricTransF(A[counter])
    if r <l(A[counter]):
      counts += 1
    counter += 1
  percent = float(counts/N)  
  counter = 0
  counts = 0
print(r)
print(percent)
print('It took',time.time()-start, 'seconds')
